<?php
namespace JosephG\Roko\Infrastructure\WordPress\Repository;

use JosephG\Roko\Domain\Security\KnownVulnerabilities\Repository\VulnerabilityRepositoryInterface;
use JosephG\Roko\Domain\Security\KnownVulnerabilities\Entity\Vulnerability;
use JosephG\Roko\Domain\Security\KnownVulnerabilities\Entity\VulnerabilityCollection;
use JosephG\Roko\Domain\Security\KnownVulnerabilities\ValueObject\CvE;

final class WpVulnerabilityRepository implements VulnerabilityRepositoryInterface {

	public function latestKnown( int $limit = 10 ): VulnerabilityCollection {

		// placeholder: pull from WPScan API or cached option
		$roko_vuln_feed = get_transient( 'roko_vuln_feed' );
		$data           = ! empty( $roko_vuln_feed ) ? $roko_vuln_feed : array();

		$vulnerabilities = array_slice(
			array_map(
				fn( $row ) => new Vulnerability(
					$row['plugin'] ?? 'unknown',
					new CvE( $row['cve'] ?? '0000-0000' ),
					$row['severity'] ?? 'low',
					new \DateTimeImmutable( $row['published'] ?? 'now' )
				),
				(array) $data
			),
			0,
			$limit
		);

		$collection = new VulnerabilityCollection( $vulnerabilities );

		$collection->setSectionSummary(
			__( 'Known Vulnerabilities', 'roko' ),
			__( 'We cross-check your plugins and themes against known security issues from trusted sources, so you can patch before attackers strike.', 'roko' )
		);

		return $collection;
	}
}
