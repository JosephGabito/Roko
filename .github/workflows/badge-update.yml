name: Update Badges

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["Code Quality"]
    types:
      - completed

jobs:
  update-badges:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Get workflow status
      id: workflow-status
      uses: actions/github-script@v7
      with:
        script: |
          const { data: workflows } = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'code-quality.yml',
            branch: 'main',
            per_page: 1
          });
          
          const latestRun = workflows.workflow_runs[0];
          const status = latestRun ? latestRun.conclusion : 'unknown';
          
          core.setOutput('build-status', status);
          core.setOutput('run-id', latestRun ? latestRun.id : '');

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'
        tools: composer:v2
        coverage: none
      env:
        COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Run tests and checks
      id: quality-checks
      run: |
        # Initialize status variables
        UNIT_TESTS="no-tests"
        PHP74_COMPAT="unknown" 
        CODING_STANDARDS="unknown"
        
        # Check PHP 7.4 compatibility
        if vendor/bin/phpcs --standard=PHPCompatibility --runtime-set testVersion 7.4- src/ roko.php > /dev/null 2>&1; then
          PHP74_COMPAT="passing"
        else
          PHP74_COMPAT="failing"
        fi
        
        # Check WordPress coding standards
        if vendor/bin/phpcs --standard=WordPress src/ roko.php > /dev/null 2>&1; then
          CODING_STANDARDS="passing"
        else
          CODING_STANDARDS="failing"
        fi
        
        # Output results
        echo "unit-tests=$UNIT_TESTS" >> $GITHUB_OUTPUT
        echo "php74-compat=$PHP74_COMPAT" >> $GITHUB_OUTPUT
        echo "coding-standards=$CODING_STANDARDS" >> $GITHUB_OUTPUT

    - name: Generate badge URLs
      id: badges
      run: |
        # Build status badge
        BUILD_STATUS="${{ steps.workflow-status.outputs.build-status }}"
        case "$BUILD_STATUS" in
          "success") BUILD_COLOR="brightgreen"; BUILD_MESSAGE="passing" ;;
          "failure") BUILD_COLOR="red"; BUILD_MESSAGE="failing" ;;
          *) BUILD_COLOR="yellow"; BUILD_MESSAGE="unknown" ;;
        esac
        
        # Unit tests badge
        UNIT_STATUS="${{ steps.quality-checks.outputs.unit-tests }}"
        case "$UNIT_STATUS" in
          "passing") UNIT_COLOR="brightgreen"; UNIT_MESSAGE="passing" ;;
          "failing") UNIT_COLOR="red"; UNIT_MESSAGE="failing" ;;
          *) UNIT_COLOR="lightgrey"; UNIT_MESSAGE="no%20tests" ;;
        esac
        
        # PHP 7.4 compatibility badge
        PHP74_STATUS="${{ steps.quality-checks.outputs.php74-compat }}"
        case "$PHP74_STATUS" in
          "passing") PHP74_COLOR="brightgreen"; PHP74_MESSAGE="compatible" ;;
          *) PHP74_COLOR="red"; PHP74_MESSAGE="incompatible" ;;
        esac
        
        # Coding standards badge
        CS_STATUS="${{ steps.quality-checks.outputs.coding-standards }}"
        case "$CS_STATUS" in
          "passing") CS_COLOR="brightgreen"; CS_MESSAGE="passing" ;;
          *) CS_COLOR="red"; CS_MESSAGE="failing" ;;
        esac
        
        # Generate shield URLs
        echo "build-badge=https://img.shields.io/badge/build-${BUILD_MESSAGE}-${BUILD_COLOR}" >> $GITHUB_OUTPUT
        echo "unit-badge=https://img.shields.io/badge/unit%20tests-${UNIT_MESSAGE}-${UNIT_COLOR}" >> $GITHUB_OUTPUT
        echo "php74-badge=https://img.shields.io/badge/PHP%207.4-${PHP74_MESSAGE}-${PHP74_COLOR}" >> $GITHUB_OUTPUT
        echo "cs-badge=https://img.shields.io/badge/coding%20standards-${CS_MESSAGE}-${CS_COLOR}" >> $GITHUB_OUTPUT

    - name: Update README with badges
      run: |
        # Create badge section
        BADGES="[![Build Status](${{ steps.badges.outputs.build-badge }})](https://github.com/${{ github.repository }}/actions/workflows/code-quality.yml)
        [![Unit Tests](${{ steps.badges.outputs.unit-badge }})](https://github.com/${{ github.repository }}/actions/workflows/code-quality.yml)
        [![PHP 7.4 Compatibility](${{ steps.badges.outputs.php74-badge }})](https://github.com/${{ github.repository }}/actions/workflows/code-quality.yml)
        [![Coding Standards](${{ steps.badges.outputs.cs-badge }})](https://github.com/${{ github.repository }}/actions/workflows/code-quality.yml)"
        
        # Update README if it exists
        if [ -f "README.md" ]; then
          if grep -q "<!-- BADGES-START -->" README.md; then
            # Replace existing badges using perl (more reliable than sed)
            perl -i -pe "
              if (/<!-- BADGES-START -->/) {
                print;
                print qq{$BADGES\n};
                while (<>) {
                  last if /<!-- BADGES-END -->/;
                }
                print qq{<!-- BADGES-END -->\n};
                next;
              }
            " README.md
          fi
        fi

    - name: Commit badge updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if ! git diff --quiet; then
          git add README.md
          git commit -m "Update status badges [skip ci]" || true
          git push || true
        fi 